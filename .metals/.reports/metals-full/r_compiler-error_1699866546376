java.util.NoSuchElementException: next on empty iterator
occurred in the presentation compiler.

action parameters:
offset: 1572
uri: file:///C:/Users/keegancarlo.falcao/lab08/81-junit/src/test/java/it/unibo/bank/impl/TestStrictBankAccount.java
text:
package it.unibo.bank.impl;

import it.unibo.bank.api.AccountHolder;
import it.unibo.bank.api.BankAccount;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static it.unibo.bank.impl.SimpleBankAccount.*;
import static it.unibo.bank.impl.SimpleBankAccount.ATM_TRANSACTION_FEE;
import static it.unibo.bank.impl.StrictBankAccount.TRANSACTION_FEE;
import static org.junit.jupiter.api.Assertions.*;

public class TestStrictBankAccount {

    private final static int INITIAL_AMOUNT = 100;

    // 1. Create a new AccountHolder and a StrictBankAccount for it each time tests are executed.
    private AccountHolder mRossi;
    private BankAccount bankAccount;

    @BeforeEach
    public void setUp() {
        mRossi = new AccountHolder("Mario", "Rossi", 1);
        bankAccount = new StrictBankAccount(mRossi, 0.0);
    }

    // 2. Test the initial state of the StrictBankAccount
    @Test
    public void testInitialization() {
        assertEquals(mRossi, bankAccount.getAccountHolder());
        assertEquals(0.0, bankAccount.getBalance());
        fail();
    }


    // 3. Perform a deposit of 100â‚¬, compute the management fees, and check that the balance is correctly reduced.
    @Test
    public void testManagementFees() {
        assertFalse(bankAccount.getTransactionsCount() > 0);
        bankAccount.deposit(mRossi.getUserID(), INITIAL_AMOUNT);
        bankAccount.chargeManagementFees(mRossi.getUserID());
        final double expectedValue = b@@
        assertEquals(MANAGEMENT_FEE, bankAccount.getBalance());
        assertTrue(bankAccount.getTransactionsCount() > 0);
   
    }

    // 4. Test the withdraw of a negative value
    @Test
    public void testNegativeWithdraw() {
        fail();
    }

    // 5. Test withdrawing more money than it is in the account
    @Test
    public void testWithdrawingTooMuch() {
        fail();
    }
}



error stacktrace:
scala.collection.Iterator$$anon$19.next(Iterator.scala:973)
	scala.collection.Iterator$$anon$19.next(Iterator.scala:971)
	scala.collection.mutable.MutationTracker$CheckedIterator.next(MutationTracker.scala:76)
	scala.collection.IterableOps.head(Iterable.scala:222)
	scala.collection.IterableOps.head$(Iterable.scala:222)
	scala.collection.AbstractIterable.head(Iterable.scala:933)
	dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:168)
	scala.meta.internal.pc.MetalsDriver.run(MetalsDriver.scala:45)
	scala.meta.internal.pc.completions.CompletionProvider.completions(CompletionProvider.scala:46)
	scala.meta.internal.pc.ScalaPresentationCompiler.complete$$anonfun$1(ScalaPresentationCompiler.scala:119)
